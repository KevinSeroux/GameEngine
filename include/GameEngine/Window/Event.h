/*------------------------------------------------------------------------------
| Copyright (C) 2013  KÃ©vin Seroux <kevin.seroux@orange.fr>                    |
|                                                                              |
| GameEngine is free software: you can redistribute it and/or modify it under  |
| it under the terms of the GNU Lesser General Public License as published by  |
| the Free Software Foundation, either version 3 of the License, or (at your   |
| option) any later version.                                                   |
|                                                                              |
| GameEngine is distributed in the hope that it will be useful, but WITHOUT    |
| ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or        |
| FITNESS FOR A PARTICULAR PURPOSE.  See the Lesser GNU General Public License |
| for more details.                                                            |
|                                                                              |
| You should have received a copy of the GNU Lesser General Public License     |
| along with GameEngine.  If not, see <http://www.gnu.org/licenses/>.          |
\_____________________________________________________________________________*/

/// \file
/// \brief Contains the events macros and structures

#ifndef EVENT__H
#define EVENT__H

#include <stdint.h>
#include "GameEngine/Common/Config.h"

namespace window
{
////////////////////////////////////////////////////////////////////////////////
/// \brief Contains all the types of event which can happen
////////////////////////////////////////////////////////////////////////////////
namespace event
{

////////////////////////////////////////////////////////////////////////////////
/// \brief The event value of Key
////////////////////////////////////////////////////////////////////////////////
#define KeyEvent 0

////////////////////////////////////////////////////////////////////////////////
/// \brief The event when a key of the keyboard is pressed or released
/// \todo Find a way to manage key
////////////////////////////////////////////////////////////////////////////////
struct Key
{
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Have the value \c true when the key is pressed and the value
    ///        \c false when the key is released
    ////////////////////////////////////////////////////////////////////////////
    bool isPressed;
};

////////////////////////////////////////////////////////////////////////////////
/// \brief The event value of MouseMotion
////////////////////////////////////////////////////////////////////////////////
#define MouseMotionEvent 1

////////////////////////////////////////////////////////////////////////////////
/// \brief The event when the mouse move
////////////////////////////////////////////////////////////////////////////////
struct MouseMotion
{
    ////////////////////////////////////////////////////////////////////////////
    /// \brief The abscissa position of the mouse
    ////////////////////////////////////////////////////////////////////////////
    uint16_t posX;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The ordinate position of the mouse
    ////////////////////////////////////////////////////////////////////////////
    uint16_t posY;
};

////////////////////////////////////////////////////////////////////////////////
/// \brief The event value of MouseButton
////////////////////////////////////////////////////////////////////////////////
#define MouseButtonEvent 2

////////////////////////////////////////////////////////////////////////////////
/// \brief The event when a button of the mouse is pressed or released
////////////////////////////////////////////////////////////////////////////////
struct MouseButton
{
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Have the value \c true if the button is pressed and the value
    ///        \c false if the button is released
    ////////////////////////////////////////////////////////////////////////////
    bool isPressed;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The button which has been pressed/released
    ///
    /// \details The following values can change between mouses :
    ///
    /// \li button = 1 : Left click
    /// \li button = 2 : Middle button (wheel button)
    /// \li button = 3 : Right click
    /// \li button = 4 : Mouse wheel up (yes, it's a button !)
    /// \li button = 5 : Mouse wheel down (it's also a button)
    /// \li button = 6 : Left click on wheel
    /// \li button = 7 : Right click on wheel
    ////////////////////////////////////////////////////////////////////////////
    uint8_t button;
};

////////////////////////////////////////////////////////////////////////////////
/// \brief The event value of MouseFocus
////////////////////////////////////////////////////////////////////////////////
#define MouseFocusEvent 3

////////////////////////////////////////////////////////////////////////////////
/// \brief The event when the mouse enter or leave the window
////////////////////////////////////////////////////////////////////////////////
struct MouseFocus
{
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Have the value \c true if the mouse fly over the window and the
    ///        value \c false if the mouse leave the window
    ////////////////////////////////////////////////////////////////////////////
    bool isFocusIn;
};

////////////////////////////////////////////////////////////////////////////////
/// \brief The event value of ActiveWindow
////////////////////////////////////////////////////////////////////////////////
#define ActiveWindowEvent 4

////////////////////////////////////////////////////////////////////////////////
/// \brief The event when the window is become the active or an inactive window
////////////////////////////////////////////////////////////////////////////////
struct ActiveWindow
{
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Have the value \c true if the window is active and the value
    ///        \c false when inactive
    ////////////////////////////////////////////////////////////////////////////
    bool isFocusIn;
};

////////////////////////////////////////////////////////////////////////////////
/// \brief The event value of WindowMove
////////////////////////////////////////////////////////////////////////////////
#define WindowMoveEvent 5

////////////////////////////////////////////////////////////////////////////////
/// \brief The event when the window move
////////////////////////////////////////////////////////////////////////////////
struct WindowMove
{
    ////////////////////////////////////////////////////////////////////////////
    /// \brief The new abscissa position on the desktop
    ////////////////////////////////////////////////////////////////////////////
    uint16_t posX;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The new ordinate position on the desktop
    ////////////////////////////////////////////////////////////////////////////
    uint16_t posY;
};

////////////////////////////////////////////////////////////////////////////////
/// \brief The event value of WindowResize
////////////////////////////////////////////////////////////////////////////////
#define WindowResizeEvent 6

////////////////////////////////////////////////////////////////////////////////
/// \brief The event when the window is resized
////////////////////////////////////////////////////////////////////////////////
struct WindowResize
{
    ////////////////////////////////////////////////////////////////////////////
    /// \brief The new width of the window
    ////////////////////////////////////////////////////////////////////////////
    uint16_t width;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The new height of the window
    ////////////////////////////////////////////////////////////////////////////
    uint16_t height;
};

////////////////////////////////////////////////////////////////////////////////
/// \brief The event value of WindowVisibility
////////////////////////////////////////////////////////////////////////////////
#define WindowVisibilityEvent 7

////////////////////////////////////////////////////////////////////////////////
/// \brief The event when the visibility of the window change
////////////////////////////////////////////////////////////////////////////////
struct WindowVisibility
{
    ////////////////////////////////////////////////////////////////////////////
    /// \brief The new state of the window
    ///
    /// \sa WindowHidden
    /// \sa WindowObstructed
    /// \sa WindowFullyVisible
    ////////////////////////////////////////////////////////////////////////////
    uint8_t state;
};

////////////////////////////////////////////////////////////////////////////////
/// \brief The state value when the window is fully hidden
////////////////////////////////////////////////////////////////////////////////
#define WindowHidden     0

////////////////////////////////////////////////////////////////////////////////
/// \brief The state value when the window is obstructed
////////////////////////////////////////////////////////////////////////////////
#define WindowObstructed 1

////////////////////////////////////////////////////////////////////////////////
/// \brief The state value when the window is fully visible
////////////////////////////////////////////////////////////////////////////////
#define WindowFullyVisible    2

////////////////////////////////////////////////////////////////////////////////
/// \brief The event value when the user click on the close button of the window
////////////////////////////////////////////////////////////////////////////////
#define WindowDestroyRequestEvent 8

}

////////////////////////////////////////////////////////////////////////////////
/// \brief List of events
////////////////////////////////////////////////////////////////////////////////
union EventList
{
    event::Key key;
    event::MouseMotion mouseMotion;
    event::MouseButton mouseButton;
    event::MouseFocus mouseFocus;
    event::ActiveWindow keyboardFocus;
    event::WindowMove windowMove;
    event::WindowVisibility windowVisibility;
    event::WindowResize windowResize;
};

////////////////////////////////////////////////////////////////////////////////
/// \brief The main structure event the user will manipulate
////////////////////////////////////////////////////////////////////////////////
struct GAME_ENGINE_EXPORT Event
{
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Correspond of one of the event value. Do not confusing with the
    ///        visibility state value
    ////////////////////////////////////////////////////////////////////////////
    uint8_t type;

    EventList events;
};

}

#endif // EVENT__H
